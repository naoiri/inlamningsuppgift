Jag siktar på VG.

Q.När använder man add respektiv commit?

A.
"Add" används när man tillägger en fil till Index platsen där filerna kan kommmitas sedan. Commit används när man vill registrera ändringar osv på lokal repository för att sedan skicka den till remote repository.

Q.Vad är pull repektive push?

A.
pull: Hämtar vad som finns i remote repository och sedan tillägga till lokal branch
push: Skickar in lokal repository till remote repository

Q.När använder man log respektive status?

A.
Log: Används för att se kommithistorik
status: Används för att kolla om det finns något som ska kommittas, vad som finns på Index samt status (Om filen är modifierad? osv)på dem.

Q.Hur kan man formulera sig i sina commit-meddelanden?

A.
Man kan göra det genom att tillägga option -m efter git commit. Man bör skriva om de ändringarna och tilläggningarna så kortfattat och tydligt som möjligt. På det viset kan man snabbt kolla tillbaka vad som gjorts senare.

Q. Det finns flera sätt att rulla tillbaka koden till ett tidigare tillstånd. Förklara skillnaden och motivera när man skulle använda den ena eller andra metoden. Ge gärna exempel på de kommandon du använder för att göra detta och vissa att det fungerar, vilken output du fick från git-kommandona.
Tips: Gör exemplen med att backa i en branch så att master fortfarande är korrekt.

A. 
Ett säkrare sätt är "git revert". Det är säkrare än "git reset" för att den kommandot lägger till en annan commit som bara tar bort en tidigare commit. Tänk om vi har en master branch och vi vill göra ändringar i tidigare steg. Först kan vi skapa en annan branch(kan kalla det för "develop" till exempel) där vi arbetar med ändringarna osv.   I develop branch kan man använda kommandot "git revert" som skapar en ny commit som tar bort en tidigare commit. Den nya commit tilläggs i commit historiken. Med git revert kan man kan välja vilken commit som tas bort. Men det kan vara lite krångligt om man tar bort någon commit som inte är den senaste för att det kan orsaka konflikt. 

T.ex. jag hade tre commitar "first commit", "second commit" och "third commit" som motsvarar 3 text filer(test.txt, test2.txt, test3.txt). När jag körde git revert <commit nummer> (vilket tar bort "third commit"), så visades "Revert third commit" och filen test3.txt tagits bort.

Däremot med "git reset" kan man gå tillbaka till dit man vill. Tänk om det finns fyra commitorar. Commit 1, 2, 3, 4. Om det finns en bugg i commit 3, kan man gå tillbaka till commit 2 med git reset och göra ändringar där. Commit 3 och 4 tas bort samtidigt. Dessutom  "git reset --soft" tar bara bort någon commit i HEAD. "Git reset --mixed" tar bort både Index och HEAD. "Git reset --hard" tar även bort något i disk samt Index och HEAD.
Nackdelen med git reset är att det är svårt att ta tillbaka commit 3 och 4. Med git revert kan man "reverta" tillgare revert eftersom det skapats en annan commit med revert. 

T.ex. jag använder samma exempel som ovan(3 committar). När jag körde git reset --hard HEAD^ så visades "HEAD is now at <commit nummer> Second commit". Jag kollade även git log för att kolla commit historiken och "third commit" försvann. Det fanns bara "first commit" och "second commit".

Sammanfattningsvis, det rekommenderas att använda git revert om man vill ändra något på den senaste commiten och det är säkrare för att commit historiken finnas kvar. Om man vill  ändra något långt tillbaka i commit historiken så kan git reset vara bättre för att undvika massa konflikter med ändringarna.
